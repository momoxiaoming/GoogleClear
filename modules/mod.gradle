
Properties properties = new Properties()
properties.load(new File(rootProject.projectDir, 'local.properties').newDataInputStream())

def defaultModuleDir = "modules"

rootProject.children.each { childProject ->
    // project may 'org.gradle.initialization.DefaultProjectDescriptor'

    String proName = childProject.name
    String nsProp = "mod.dir"

    // 如果 modDirNameSpace#moduleName 是这样的命名，
    // 则使用 预先定义的 模块 namespace 目录去查找
    def useSpecialNs = false
    def (nameSpace, projectName) = proName.tokenize("#");
    if (nameSpace && projectName) {
        nsProp = nameSpace + ".dir"
        childProject.name = proName = projectName;
        useSpecialNs = true
    }

    String proDir = properties.getProperty(nsProp)

    if (useSpecialNs && !proDir?.trim()) {
        def errorMsg = "需要在local.poperties里面设置${nsProp}的路径.如:\n" +
                "${nsProp}=/home/holmes/android/android/Modular/Base"
        throw new StopExecutionException(errorMsg)
    }

    def hasGradle = childProject.projectDir
            .list({ dir, filename -> filename.endsWith('.gradle') } as FilenameFilter)

    println "module:[${proName}]".padRight(16) + " gradle fileCount:${hasGradle?.size() ?: 0} files:" + hasGradle?.join(",")

    if (!hasGradle) {
        def subprojects = childProject.getChildren()
        if (!subprojects.isEmpty()) {
            println "module:[${proName}] has subproject, ${subprojects}, passby!"
            return
        }
        // 去 namespace 目录下找 (默认是 modules)
        if (!proDir?.trim()) {
            // 没有定义 默认模块目录
            proDir = new File(rootProject.projectDir, defaultModuleDir).absolutePath
        }

        if (!file(proDir).exists()) {
            throw new StopExecutionException("没有找到模块目录(for module: ${proName}) ${proDir}")
        }

        childProject.projectDir = new File(proDir, proName)
    }

}