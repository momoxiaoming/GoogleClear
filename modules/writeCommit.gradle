import groovy.xml.MarkupBuilder

allprojects {
    afterEvaluate { project ->

        def hasApplication = project.android.defaultConfig != null && project.android.defaultConfig.applicationId != null
        if (hasApplication) {
            def rootPath = project.projectDir

            def destFile = new File(rootPath, '/src/main/assets/xdd.xml') //指定输出文件
            def gitSha = 'git rev-parse HEAD'.execute([], project.rootDir).text.trim()
            def gitStatus = 'git status'.execute([], project.rootDir).text.trim()
            def time = new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone("GMT+08"))

            def assetDir = destFile.parentFile
            if (!assetDir.exists()) {
                assetDir.mkdirs()
            }
            if (destFile != null && !destFile.exists()) {
                destFile.createNewFile()
            }

            //检查是否有修改未提交
            def isRelease = isReleaseBuildType()
            if (isRelease) {
                if (!gitStatus.contains("nothing to commit")) {
                    def file = new File(rootProject.projectDir, ".check-ignore")
                    if (!file.exists()) {
//                        throw new GradleException("git has modify not commit.")
                    }
                }
            }

            def preBuildTask = project.tasks.getByName('preBuild')
            preBuildTask.doFirst {
                def sw = new StringWriter()
                def xmlBuilder = new MarkupBuilder(sw)
                if (destFile.text != null && destFile.text.size() > 0) {
                    println 'delete suc'
                    destFile.delete()
                }
                xmlBuilder.releases {
                    h(gitSha)
                    t(time)
                }
                //直接写入
                destFile.withWriter { writer ->
                    writer.append(sw.toString())
                    println 'writer suc'
                }
            }
        }
    }
}

boolean isReleaseBuildType() {
    for (String taskName : gradle.startParameter.taskNames) {
        println("taskName: $taskName")
        return ((taskName.contains("assemble")||(taskName.toLowerCase(Locale.US).contains("resguard"))) && !taskName.contains("Debug"))
    }
    return false
}
